const functions = require('firebase-functions');
const admin = require('firebase-admin');

admin.initializeApp();

exports.sendStockNotifications = functions
  .region('us-central1')
  .https.onCall(async (data, context) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!context.auth) {
      throw new functions.https.HttpsError(
        'unauthenticated',
        '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    const adminEmail = 'pimashin2015@gmail.com';
    if (context.auth.token.email?.toLowerCase() !== adminEmail) {
      throw new functions.https.HttpsError(
        'permission-denied',
        '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
      );
    }

    const { productId, productName, productUrl } = data;

    if (!productId || !productName || !productUrl) {
      throw new functions.https.HttpsError(
        'invalid-argument',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: productId, productName, productUrl'
      );
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
      const notificationsRef = admin
        .firestore()
        .collection('stockNotifications');
      
      const snapshot = await notificationsRef
        .where('productId', '==', productId)
        .where('notified', '==', false)
        .get();

      if (snapshot.empty) {
        return { sentCount: 0 };
      }

      const emails = snapshot.docs.map(doc => doc.data().email);
      const resendApiKey = functions.config().resend?.api_key;

      if (!resendApiKey) {
        console.error('RESEND_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Firebase Config');
        throw new functions.https.HttpsError(
          'internal',
          'Email —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        );
      }

      let sentCount = 0;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —á–µ—Ä–µ–∑ Resend API
      for (const email of emails) {
        try {
          const response = await fetch('https://api.resend.com/emails', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${resendApiKey}`,
            },
            body: JSON.stringify({
              from: 'Sweet Delights <onboarding@resend.dev>',
              to: [email],
              subject: `${productName} —Å–Ω–æ–≤–∞ –≤ –Ω–∞–ª–∏—á–∏–∏! üéâ`,
              html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                  <h2 style="color: #EC4899;">–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</h2>
                  <p style="font-size: 16px; line-height: 1.5;">
                    –¢–æ–≤–∞—Ä <strong>${productName}</strong>, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å, —Å–Ω–æ–≤–∞ –≤ –Ω–∞–ª–∏—á–∏–∏!
                  </p>
                  <p style="font-size: 16px; line-height: 1.5;">
                    –ü–æ—Å–ø–µ—à–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–∫–∞ —Ç–æ–≤–∞—Ä –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Å–Ω–æ–≤–∞.
                  </p>
                  <a href="${productUrl}" style="display: inline-block; background-color: #EC4899; color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; font-weight: bold; margin: 20px 0;">
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É
                  </a>
                  <p style="font-size: 14px; color: #666; margin-top: 30px;">
                    –° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏,<br/>
                    –ö–æ–º–∞–Ω–¥–∞ Sweet Delights üç¨
                  </p>
                </div>
              `,
            }),
          });

          if (response.ok) {
            sentCount++;
          } else {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ ${email}:`, await response.text());
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ ${email}:`, error);
        }
      }

      // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      const batch = admin.firestore().batch();
      snapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });
      await batch.commit();

      console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productName}`);
      return { sentCount };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      throw new functions.https.HttpsError('internal', error.message);
    }
  });
