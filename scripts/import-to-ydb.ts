import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, PutCommand, BatchWriteCommand } from "@aws-sdk/lib-dynamodb";
import { readFileSync, readdirSync } from "fs";
import { join } from "path";

const client = new DynamoDBClient({
  region: "ru-central1",
  endpoint: process.env.VITE_YDB_ENDPOINT,
  credentials: {
    accessKeyId: process.env.VITE_YDB_ACCESS_KEY_ID!,
    secretAccessKey: process.env.VITE_YDB_SECRET_KEY!,
  },
});

const docClient = DynamoDBDocumentClient.from(client);

const exportDir = join(process.cwd(), 'export');

async function importCollection(collectionName: string, data: any[]) {
  try {
    console.log(`üì• –ò–º–ø–æ—Ä—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collectionName}...`);
    
    let imported = 0;
    
    for (const item of data) {
      try {
        await docClient.send(new PutCommand({
          TableName: collectionName,
          Item: item,
        }));
        imported++;
        
        if (imported % 10 === 0) {
          process.stdout.write(`\r   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported}/${data.length}`);
        }
      } catch (error: any) {
        console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∑–∞–ø–∏—Å–∏ ${item.id}:`, error.message);
      }
    }
    
    console.log(`\n‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${imported} –∑–∞–ø–∏—Å–µ–π –≤ ${collectionName}`);
    return imported;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ ${collectionName}:`, error);
    return 0;
  }
}

async function importAll() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Yandex Database (YDB)...\n');
  
  const files = readdirSync(exportDir).filter(f => f.endsWith('.json') && !f.startsWith('_'));
  
  let totalRecords = 0;
  
  for (const file of files) {
    const collectionName = file.replace('.json', '');
    const filePath = join(exportDir, file);
    
    try {
      const content = readFileSync(filePath, 'utf-8');
      const data = JSON.parse(content);
      
      if (Array.isArray(data) && data.length > 0) {
        const count = await importCollection(collectionName, data);
        totalRecords += count;
      } else {
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${collectionName} (–ø—É—Å—Ç–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è)`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, error);
    }
    
    console.log('');
  }
  
  console.log(`\n‚ú® –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalRecords}`);
}

console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YDB...');
console.log(`   Endpoint: ${process.env.VITE_YDB_ENDPOINT}`);
console.log(`   Access Key ID: ${process.env.VITE_YDB_ACCESS_KEY_ID?.substring(0, 20)}...`);

if (!process.env.VITE_YDB_ENDPOINT || !process.env.VITE_YDB_ACCESS_KEY_ID || !process.env.VITE_YDB_SECRET_KEY) {
  console.error('\n‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è YDB!');
  console.error('–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:');
  console.error('  VITE_YDB_ENDPOINT=...');
  console.error('  VITE_YDB_ACCESS_KEY_ID=...');
  console.error('  VITE_YDB_SECRET_KEY=...');
  process.exit(1);
}

importAll()
  .then(() => {
    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Yandex Cloud.');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
